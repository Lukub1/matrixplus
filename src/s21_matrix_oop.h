#ifndef __S21MATRIX_H__
#define __S21MATRIX_H__

#include <cmath>
#include <iostream>

class S21Matrix {
 private:
  // Attributes
  int rows_, cols_;  // Rows and columns
  double **matrix_;  // Pointer to the memory where the matrix is allocated

  void s21_create_matrix();

 public:
  S21Matrix();  // Базовый конструктор, инициализирующий матрицу некоторой
                // заранее заданной размерностью
  S21Matrix(int rows, int cols);  // Параметризированный конструктор с
                                  // количеством строк и столбцов
  S21Matrix(const S21Matrix &other);  // Конструктор копирования
  S21Matrix(S21Matrix &&other);  // Конструктор переноса
  ~S21Matrix();                  // Деструктор

  /*Изменяет количество строк матрицы на заданное значение rows.*/
  void setRows(int rows);
  /*Изменяет количество столбцов матрицы на заданное значение cols. */
  void setCols(int cols);
  /*Возвращает текущее количество строк матрицы.*/
  int getRows();
  /*Возвращают текущее количество столбцов матрицы.*/
  int getCols();

  // операторы переопределения

  /* Перегружает оператор присваивания для матрицы S21Matrix. Она проверяет, не
   ссылается ли присваиваемый объект на тот же самый объект, после чего
   освобождает память от текущей матрицы и создает новую матрицу с теми же
   размерами, что и у объекта other. Затем функция копирует значения элементов
   матрицы other в новую матрицу.*/
  S21Matrix &operator=(const S21Matrix &other);
  /*Перегружает оператор сложения для матрицы S21Matrix. Создает новый объект
   S21Matrix, который является результатом операции сложения текущей матрицы с
   матрицей other.*/
  S21Matrix operator+(const S21Matrix &other);
  /*Перегружает оператор вычитания для матрицы S21Matrix. Создает новый объект
  S21Matrix, который является результатом операции вычитания текущей матрицы с
  матрицей other.*/
  S21Matrix operator-(const S21Matrix &other);
  /*Перегружает оператор сложения с присваиванием для матрицы S21Matrix.
   Изменяет текущую матрицу, добавляя к ней матрицу other.*/
  S21Matrix &operator+=(const S21Matrix &other);
  /*Перегружает оператор вычитания с присваиванием для матрицы S21Matrix.
   Изменяют текущую матрицу, вычитая из нее матрицу other.*/
  S21Matrix &operator-=(const S21Matrix &other);
  /*Перегружает оператор сравнения равенства для матрицы S21Matrix. Она
   возвращает true, если текущая матрица и матрица other имеют одинаковые
   размеры и значения всех элементов в них равны.*/
  bool operator==(const S21Matrix &other);
  /*Перегружает оператор умножения для матрицы S21Matrix. Создает новый объект
   S21Matrix, который является результатом умножения текущей матрицы на
   скалярное значение num.*/
  S21Matrix operator*(const double num);
  /*Перегружает оператор умножения для матрицы S21Matrix. Создает новый объект
   S21Matrix, который является результатом умножения текущей матрицы на матрицу
   other.*/
  S21Matrix operator*(const S21Matrix &other);
  /*Перегружает оператор умножения с присваиванием для матрицы S21Matrix.
   Изменяет текущую матрицу, умножая ее на матрицу other.*/
  S21Matrix &operator*=(const double num);
  /*Перегружает оператор умножения с присваиванием для матрицы S21Matrix.
  Изменяет текущую матрицу, умножая ее на скалярное значение num*/
  S21Matrix &operator*=(const S21Matrix &other);
  /*Функция перегружает оператор круглых скобок () для класса S21Matrix. Она
     возвращает ссылку на элемент матрицы, находящийся в строке row и столбце
     col. Если указанный индекс находится за пределами размеров матрицы, то
     генерируется исключение типа out_of_range с сообщением "Incorrect input,
     index is out of range".*/
  double &operator()(int row, int col);

  // функции с матрицами

  /*Функция, которая сравнивает текущую матрицу с другой матрицей, переданной в
    качестве аргумента. Возвращает значение true, если матрицы равны, и false в
    противном случае.*/
  bool EqMatrix(const S21Matrix &other);
  /*Функция, которая складывает текущую матрицу с другой матрицей, переданной в
   качестве аргумента. Если матрицы имеют разные размеры, выбрасывается
   исключение out_of_range.*/
  void SumMatrix(const S21Matrix &other);
  /*Функция, которая вычитает из текущей матрицы другую матрицу, переданную в
   качестве аргумента. Если матрицы имеют разные размеры, выбрасывается
   исключение out_of_range.*/
  void SubMatrix(const S21Matrix &other);
  /*Функция, которая умножает текущую матрицу на число, переданное в качестве
   аргумента.*/
  void MulNumber(const double num);
  /*Функция, которая перемножает текущую матрицу на другую матрицу, переданную в
   качестве аргумента. Если число столбцов первой матрицы не равно числу строк
   второй матрицы, выбрасывается исключение out_of_range.*/
  void MulMatrix(const S21Matrix &other);
  /*Функция, которая возвращает транспонированную матрицу текущей матрицы.*/
  S21Matrix Transpose();
  /*Функция, которая вычисляет определитель текущей матрицы. Если матрица не
   является квадратной, выбрасывается исключение out_of_range.*/
  double Determinant();
  /*Функция, которая вычисляет матрицу алгебраических дополнений текущей
   матрицы. Если матрица не является квадратной, выбрасывается исключение
   out_of_range.*/
  S21Matrix CalcComplements();
  /*Функция, которая вычисляет обратную матрицу текущей матрицы. Если
   определитель матрицы равен 0, выбрасывается исключение out_of_range.*/
  S21Matrix InverseMatrix();

  // доп функции
  /* функция возвращает минор матрицы, полученный из исходной матрицы путем
   удаления указанной строки и столбца.*/
  S21Matrix GetMinor(int row, int col) const;
};

#endif
